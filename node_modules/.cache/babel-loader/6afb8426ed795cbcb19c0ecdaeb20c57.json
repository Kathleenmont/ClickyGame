{"ast":null,"code":"var _jsxFileName = \"/Users/kathleenmontesano/upenn/homework/ClickyGame/click-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport images from \"./images.json\";\nimport \"./App.css\";\nimport Jumbotron from \"./components/jumbotron/index\";\nimport ScoreHeader from \"./components/scoreHeader/index\";\nimport MemoryCard from \"./components/memoryCard/index\";\nimport Container from \"./components/cardContainer/index\";\nimport shuffle from 'shuffle-array';\nlet keyList = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images,\n      score: 0,\n      topScore: 0\n    };\n\n    this.highScore = state => {\n      this.state.score > this.state.topScore ? this.setState({\n        topScore: this.score\n      }) : this.setState({\n        topScore: this.topScore\n      });\n      console.log(\"TOPSCORE\" + state.topScore);\n    };\n\n    this.cardShuffle = state => {\n      shuffle(this.state.images);\n      this.setState({\n        images\n      });\n    };\n\n    this.cardClick = id => {\n      console.log(id);\n      let key = id;\n      let score = this.state.score;\n      let myKey = key;\n      console.log(myKey);\n\n      if (!keyList.includes(myKey)) {\n        score++;\n        this.setState({\n          score: score\n        });\n        this.highScore(this.state);\n        console.log(\"key \" + key);\n        keyList.push(myKey);\n        console.log(\"keyList: \" + keyList); // console.log(\"Object BEFORE\" + JSON.stringify(this.state.images));\n\n        this.cardShuffle(this.state); // console.log(\"Object \" + JSON.stringify(this.state.images[id -1]));\n      } else {\n        score = 0;\n        keyList = [];\n        this.setState({\n          score: score\n        });\n        alert(\"you lost\");\n      }\n    };\n\n    this.cardShuffle = this.cardShuffle.bind(this);\n    this.cardClick = this.cardClick.bind(this);\n    this.highScore = this.highScore.bind(this);\n  }\n\n  render() {\n    // console.log(\"Object AFTER\" + JSON.stringify(this.state.images));\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(ScoreHeader, {\n      score: this.state.score,\n      highScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), this.state.images.map(image => React.createElement(MemoryCard, {\n      cardClick: this.cardClick,\n      cardShuffle: this.cardShuffle,\n      key: image.id,\n      id: image.id,\n      name: image.name,\n      image: image.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kathleenmontesano/upenn/homework/ClickyGame/click-game/src/App.js"],"names":["React","Component","images","Jumbotron","ScoreHeader","MemoryCard","Container","shuffle","keyList","App","constructor","props","state","score","topScore","highScore","setState","console","log","cardShuffle","cardClick","id","key","myKey","includes","push","alert","bind","render","map","image","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport images from \"./images.json\";\nimport \"./App.css\";\nimport Jumbotron from \"./components/jumbotron/index\";\nimport ScoreHeader from \"./components/scoreHeader/index\";\nimport MemoryCard from \"./components/memoryCard/index\";\nimport Container from \"./components/cardContainer/index\";\nimport shuffle from 'shuffle-array';\nlet keyList = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.cardShuffle = this.cardShuffle.bind(this);\n    this.cardClick = this.cardClick.bind(this);\n    this.highScore = this.highScore.bind(this);\n  }\n  \n  state = {\n    images,\n    score: 0,\n    topScore: 0\n  }\n\n  highScore = (state) => {\n    this.state.score > this.state.topScore ? \n      this.setState ({topScore: this.score}) : this.setState ({topScore: this.topScore})\n      console.log(\"TOPSCORE\" + state.topScore)\n  }\n\n  cardShuffle = (state) => {\n    shuffle(this.state.images);\n    this.setState ({\n      images\n    })\n  }\n\n  \n\n  cardClick = (id) => {\n    console.log(id);\n    let key = id;\n    let score = this.state.score;\n    let myKey = key;\n    console.log(myKey)\n\n    if (!keyList.includes(myKey)) {\n      \n      score++;\n      this.setState({\n        score: score\n      });\n      this.highScore(this.state);\n      console.log(\"key \" + key)\n      keyList.push(myKey);\n      console.log(\"keyList: \" + keyList)\n      // console.log(\"Object BEFORE\" + JSON.stringify(this.state.images));\n      this.cardShuffle(this.state);\n      \n      // console.log(\"Object \" + JSON.stringify(this.state.images[id -1]));\n      \n    } else {\n      score = 0\n      keyList = [];\n      this.setState ({\n        score: score\n      });\n      alert(\"you lost\")\n    } \n  }\n\n  render() {\n    // console.log(\"Object AFTER\" + JSON.stringify(this.state.images));\n    return (\n      <Container>\n        <Jumbotron />\n        <ScoreHeader score={this.state.score} highScore={this.state.topScore}/>\n        {this.state.images.map(image => (\n          <MemoryCard \n          \n          cardClick={this.cardClick} \n          cardShuffle={this.cardShuffle}\n          key={image.id} \n          id={image.id}\n          name={image.name} \n          image={image.image} \n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}